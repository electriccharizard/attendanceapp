import java.util.Arrays;
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int m = scanner.nextInt();
        System.out.print("Enter the number of columns: ");
        int n = scanner.nextInt();
        char[][] seats = new char[m][n];

        System.out.println("Enter the seat arrangement:");
        for (int i = 0; i < m; i++) {
            String row = scanner.next();
            seats[i] = row.toCharArray();
        }

        int maxStudents = maxStudents(seats);
        System.out.println("Maximum number of students: " + maxStudents);
    }

    public static int maxStudents(char[][] seats) {
        int m = seats.length;
        int n = seats[0].length;
        int[][] dp = new int[m + 1][1 << n];

        for (int i = 1; i <= m; i++) {
            for (int mask = 0; mask < (1 << n); mask++) {
                if (!isValid(mask, seats[i - 1])) {
                    continue;
                }

                for (int prevMask = 0; prevMask < (1 << n); prevMask++) {
                    if (!isValidTransition(prevMask, mask, seats[i - 1])) {
                        continue;
                    }

                    int currStudents = Integer.bitCount(mask);
                    dp[i][mask] = Math.max(dp[i][mask], dp[i - 1][prevMask] + currStudents);
                }
            }
        }

        return Arrays.stream(dp[m]).max().getAsInt();
    }

    private static boolean isValid(int mask, char[] row) {
        for (int i = 0; i < row.length; i++) {
            if ((mask & (1 << i)) != 0 && row[i] == '#') {
                return false;
            }
        }
        return true;
    }

    private static boolean isValidTransition(int prevMask, int currMask, char[] row) {
        for (int i = 0; i < row.length; i++) {
            if ((currMask & (1 << i)) != 0) {
                if ((i > 0 && (prevMask & (1 << (i - 1))) != 0) || (i < row.length - 1 && (prevMask & (1 << (i + 1))) != 0)) {
                    return false;
                }
            }
        }
        return true;
    }
}
